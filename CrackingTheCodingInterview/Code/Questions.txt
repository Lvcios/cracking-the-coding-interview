Chapter list (based on the 6th edition):

Data Structures
Chapter 1: Arrays and Strings
Chapter 2: Linked Lists
Chapter 3: Stacks and Queues
Chapter 4: Trees and Graphs

Concepts and Algorithms
Chapter 5: Bit Manipulation
Chapter 6: Math and Logic Puzzles
Chapter 7: Object-Oriented Design
Chapter 8: Recursion and Dynamic Programming
Chapter 9: System Design and Scalability
Chapter 10: Sorting and Searching
Chapter 11: Testing

Knowledge Based
Chapter 12: C and C++
Chapter 13: Java
Chapter 14: Databases
Chapter 15: Threads and Locks

Additional Review Problems
Chapter 16: Moderate
Chapter 17: Hard

=== Chapter 1 ===

1.1 Is Unique: Implement an algorithm to determine if a string has all unique characters.  What if you cannot use additional data structures?

1.2 Check Permutation: Given two strings, write a method to decide if one is a permutation of the other.

1.3 URLify: Write a method to replace all spaces in a string with '%20'.  You may assume that the string has sufficient space at the end of the string to hold the additional characters, and that you are given the "true" length of the string. (Note: if implementing in java, please use a character array so that you can perform this operation in place.)
	EXAMPLE
	Input:  "Mr John Smith    "
	Output: "Mr%20John%20Smith"

TODO rkeim
1.4 Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palindrome.  A palindrome is a word or phrase that is the same forwards and backwards.  A permutation is a rearrangement of letters.  The palindrome does not need to be limited to just dictionary words.
	EXAMPLE
	Input: Tact Coa
	Output: True (permutations: "taco cat", "atco cta", etc.)

TOOD rkeim
1.5 One Away: There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character.  Given two strings, write a function to check if they are one dit (or zero edits) away.
	EXAMPLE
	pale, ple -> true
	pales, pale -> true
	pale, bale -> true
	pale, bake -> false

1.6 String Compression: Implement a method to perform basic string compression using the counts of repeated characters.  For example, the string aabcccccaaa would become a2b1c5a3.  If the "compressed" string would not become smaller than the original string, your method should return the original string.

1.7 Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

1.8 Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.

1.9  String Rotation: Assume you have a method isSubstring which checks if one word is a substring of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring (e.g.,"waterbottle" is a rotation of "erbottlewat").

=== Chapter 2 ===

2.1 Remove Dups: Write code to remove duplicates from an unsorted linked list.  FOLLOW UP How would you solve this problem if a temporary buffer is not allowed?

2.2 Return Kth to Last: Implement an algorithm to find the kth to last element of a singly linked list.

2.3 Delete Middle Node: Implement an algorithm to delete a node in the middle of a singly linked list, given only access to that node.
	EXAMPLE
	Input: the node c from the linked list a->b->c->d->e
	Result: nothing is returned, but the new linked list looks like a->b->d->e

2.4 Partition: Write code to parition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x.