Chapter list:

Data Structures
Chapter 1: Arrays and Strings
Chapter 2: Linked Lists
Chapter 3: Stacks and Queues
Chapter 4: Trees and Graphs

Concepts and Algorithms
Chapter 5: Bit Manipulations
Chapter 6: Brain Teasers
Chapter 7: Mathematics and Probability
Chapter 8: Object-Oriented Design
Chapter 9: Recursion and Dynamic Programming
Chapter 10: Scalability and Memory Limits
Chapter 11: Sorting and Searching
Chapter 12: Testing

Knowledge Based
Chapter 13: C and C++
Chapter 14: Java
Chapter 15: Databases
Chapter 16: Threads and Locks

Additional Review Problems
Chapter 17: Moderate
Chapter 18: Hard

=== Chapter 1 ===

1.1 Implement an algorithm to determine if a string has all unique characters.  What if you cannot use additional data structures?

1.2 Implement a function void reverse(char* str) in C or C++ which reverses a null terminated string.

1.3 1.3 Given two strings, write a method to decide if one is a permutation of the other

1.4 Write a method to replace all spaces in a string with '%20'.  You may assume that the string has sufficient space at the end of the string to hold the additional characters, and that you are given the "true" length of the string. (Note: if implementing in java, please use a character array so that you can perform this operation in place.)
	EXAMPLE
	Input:  "Mr John Smith    "
	Output: "Mr%20John%20Smith"

1.5 Implement a method to perform basic string compression using the counts of repeated characters.  For example, the string aabcccccaaa would become a2b1c5a3.  If the "compressed" string would not become smaller than the original string, your method should return the original string.

1.6 Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

1.7 Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.